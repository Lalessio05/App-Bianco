{"ast":null,"code":"import { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PetersonScreen(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: \"center\"\n      },\n      children: [_jsx(Text, {\n        style: {\n          textAlign: \"center\",\n          color: \"black\",\n          fontSize: 20,\n          fontWeight: \"bold\",\n          width: 340,\n          backgroundColor: \"white\"\n        },\n        children: \"L'algoritmo di peterson (o tiebreaker) \\xE8 un algoritmo che permette la mutua esclusione. Funziona nel seguente modo: Si hanno due variabili booleane condivise tra i due thread o processi che indicano il turno. Finch\\xE9 il turno di un processo non \\xE8 finito l'altro processo rimarr\\xE0 ad aspettare in un ciclo while. I lati negativi di questo algoritmo sono principalmente l'utilizzo di risorse inutili, quando un processo \\xE8 nel while ad aspettare la CPU viene usata per niente.\"\n      }), _jsx(Image, {\n        source: require(\"../images/Puzzle.jpg\"),\n        style: {\n          position: \"absolute\",\n          zIndex: -1,\n          width: \"100%\",\n          height: \"100%\"\n        }\n      })]\n    })\n  });\n}\n_NativeWindStyleSheet.create({\n  styles: {\n    \"absolute\": {\n      \"position\": \"absolute\"\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    }\n  }\n});","map":{"version":3,"names":["PetersonScreen","navigation","flex","alignItems","textAlign","color","fontSize","fontWeight","width","backgroundColor","require","position","zIndex","height"],"sources":["C:/Users/catri/Documents/Code/App-Bianco/screens/PetersonScreen.js"],"sourcesContent":["import { Button, View, Text, Image } from \"react-native\";\r\n\r\nexport default function PetersonScreen({ navigation }) {\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: \"center\" }}>\r\n        <Text\r\n          style={{\r\n            textAlign: \"center\",\r\n            color: \"black\",\r\n            fontSize: 20,\r\n            fontWeight: \"bold\",\r\n            width: 340,\r\n            backgroundColor: \"white\",\r\n          }}\r\n        >\r\n          L'algoritmo di peterson (o tiebreaker) è un algoritmo che permette la\r\n          mutua esclusione. Funziona nel seguente modo: Si hanno due variabili\r\n          booleane condivise tra i due thread o processi che indicano il turno.\r\n          Finché il turno di un processo non è finito l'altro processo rimarrà\r\n          ad aspettare in un ciclo while. \r\n          I lati negativi di questo algoritmo sono principalmente l'utilizzo di risorse inutili, quando un processo è nel while ad aspettare la CPU viene usata per niente.\r\n        </Text>\r\n        <Image\r\n          source={require(\"../images/Puzzle.jpg\")}\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: -1,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;AAEA,eAAe,SAASA,cAAc,OAAiB;EAAA,IAAdC,UAAU,QAAVA,UAAU;EACjD,OACE,KAAC,IAAI;IAAC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE;IAAA,UACvB,MAAC,IAAI;MAAC,KAAK,EAAE;QAAEA,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAA,WAC7C,KAAC,IAAI;QACH,KAAK,EAAE;UACLC,SAAS,EAAE,QAAQ;UACnBC,KAAK,EAAE,OAAO;UACdC,QAAQ,EAAE,EAAE;UACZC,UAAU,EAAE,MAAM;UAClBC,KAAK,EAAE,GAAG;UACVC,eAAe,EAAE;QACnB,CAAE;QAAA,UACH;MAOD,EAAO,EACP,KAAC,KAAK;QACJ,MAAM,EAAEC,OAAO,wBAAyB;QACxC,KAAK,EAAE;UACLC,QAAQ,EAAE,UAAU;UACpBC,MAAM,EAAE,CAAC,CAAC;UACVJ,KAAK,EAAE,MAAM;UACbK,MAAM,EAAE;QACV;MAAE,EACF;IAAA;EACG,EACF;AAEX;AAAC;EAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}